"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-w0cyg(e4+bo*ivqy3me^i-zoac8_d@o^x=*2dmw9o&i(&(z-+2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'accounts.apps.AccountsConfig',
    'recruitment',
]

# Sécurité HTTP côté middleware
# - SecurityMiddleware: active des protections utiles (HSTS, redirect HTTPS si configuré)
# - CsrfViewMiddleware: protège contre les attaques CSRF
# - XFrameOptionsMiddleware: protège contre le clickjacking via l'en-tête X-Frame-Options
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # CSRF
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Clickjacking
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Validation des mots de passe renforcée
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
# - UserAttributeSimilarityValidator: empêche d'utiliser des mots de passe trop proches
#   des attributs utilisateur (nom, email, etc.).
# - MinimumLengthValidator: longueur minimale (augmentée ici à 12 caractères).
# - CommonPasswordValidator: rejette les mots de passe courants/faibles.
# - NumericPasswordValidator: rejette les mots de passe purement numériques.
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        # 'OPTIONS': {'max_similarity': 0.7},  # exemple: resserrer encore si besoin
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {'min_length': 12},  # longueur minimale augmentée
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr-FR'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Fichiers médias (uploads utilisateurs)
# MEDIA_URL: URL publique pour servir les fichiers uploadés
# MEDIA_ROOT: répertoire sur le système de fichiers où sont stockés les fichiers
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Permissions des fichiers et répertoires uploadés (sécurité des accès)
# - 0o640: lecture/écriture pour l'utilisateur du processus, lecture pour le groupe
# - 0o750: propriétaire tout accès, groupe lecture/exécution (par ex. pour serveur web)
FILE_UPLOAD_PERMISSIONS = 0o640
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o750

# Authentification / redirections
# LOGIN_URL: l'URL de connexion (nom de route). Utilisée par @login_required, etc.
# LOGIN_REDIRECT_URL: fallback de redirection après login si aucune "next" n'est fournie.
# LOGOUT_REDIRECT_URL: où rediriger après déconnexion.
# Pour des redirections selon les rôles, notre RoleBasedLoginView applique déjà
# une logique dédiée. On expose néanmoins un mapping à titre de configuration.
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'profile'  # fallback générique (la vue de login gère les rôles)
LOGOUT_REDIRECT_URL = '/'
# Mapping indicatif pour les redirections par rôle (utilisable par les vues si besoin)
ROLE_LOGIN_REDIRECTS = {
    'admin': '/admin/',
    'recruiter': '/profile/',
    'candidate': '/profile/',
}

# Sécurité des sessions et des cookies
# - SESSION_COOKIE_SECURE/CSRF_COOKIE_SECURE: envoie les cookies uniquement via HTTPS
# - *_HTTPONLY: empêche l'accès aux cookies via JavaScript (mitige XSS)
# - *_SAMESITE: limite l'envoi des cookies aux contextes de même site (mitige CSRF)
# - SESSION_EXPIRE_AT_BROWSER_CLOSE: option pour expirer à la fermeture du navigateur
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SAMESITE = 'Lax'
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
# Durée de vie de session (en secondes). 1 jour ici (adapter selon besoin)
SESSION_COOKIE_AGE = 60 * 60 * 24

# En-têtes et sécurité HTTPS (même en dev, pour habituer l'environnement)
# - SECURE_SSL_REDIRECT: force le HTTPS (désactiver si développement sans HTTPS)
# - SECURE_HSTS_*: active HSTS pour imposer HTTPS côté navigateur
# - SECURE_CONTENT_TYPE_NOSNIFF: bloque le MIME sniffing
# - SECURE_REFERRER_POLICY: réduit les infos de referer envoyées
# - X_FRAME_OPTIONS: empêche l'inclusion dans des iframes (clickjacking)
SECURE_SSL_REDIRECT = False  # mettre True en prod ou dev avec HTTPS
SECURE_HSTS_SECONDS = 31536000  # 1 an
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
X_FRAME_OPTIONS = 'DENY'

# Si l'application est derrière un proxy (ex: Nginx) qui termine TLS, décommentez:
# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==========================
# Django REST Framework (DRF)
# ==========================
# Configuration par défaut des permissions et authentifications pour l'API.
# - IsAuthenticated: exige que l'utilisateur soit connecté pour accéder à l'API par défaut.
# - SessionAuthentication: utilise la session Django (pratique avec le site web).
# - BasicAuthentication: utile pour tests via outils type curl/Postman (à désactiver en prod si non nécessaire).
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# ==========================
# Email / SMTP configuration
# ==========================
# Pour l'envoi d'emails (notifications, bienvenue, réinitialisation, etc.).
# On utilise par défaut le SMTP Gmail pour les tests. Les identifiants NE DOIVENT
# PAS être committés: utilisez des variables d'environnement.
#
# Variables d'environnement proposées:
# - EMAIL_BACKEND: backend Django (par défaut smtp)
# - EMAIL_HOST: hôte SMTP (smtp.gmail.com)
# - EMAIL_PORT: port SMTP (587 pour TLS)
# - EMAIL_USE_TLS: True pour STARTTLS
# - EMAIL_USE_SSL: False (ne pas activer en même temps que TLS)
# - EMAIL_HOST_USER: votre adresse expéditrice (Gmail)
# - EMAIL_HOST_PASSWORD: mot de passe d'application (Gmail App Password)
# - DEFAULT_FROM_EMAIL: email expéditeur par défaut
# - SERVER_EMAIL: email de l'expéditeur des erreurs serveur
# - EMAIL_TIMEOUT: timeout en secondes pour les connexions SMTP
# - EMAIL_SUBJECT_PREFIX: préfixe des sujets d'email
#
# Important pour Gmail:
# - Activez la validation 2FA et utilisez un "App password" dédié.
# - Évitez les « less secure apps » (obsolète côté Gmail).
EMAIL_BACKEND = os.environ.get(
    'EMAIL_BACKEND',
    'django.core.mail.backends.smtp.EmailBackend',
)
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
# Port STARTTLS conseillé pour Gmail
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'true').lower() in ('1', 'true', 'yes')
# Ne pas activer SSL si TLS est activé. Pour SSL direct, utilisez port 465 et EMAIL_USE_TLS=false.
EMAIL_USE_SSL = os.environ.get('EMAIL_USE_SSL', 'false').lower() in ('1', 'true', 'yes') and not EMAIL_USE_TLS
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER or 'no-reply@example.com')
SERVER_EMAIL = os.environ.get('SERVER_EMAIL', DEFAULT_FROM_EMAIL)
EMAIL_TIMEOUT = int(os.environ.get('EMAIL_TIMEOUT', '30'))
EMAIL_SUBJECT_PREFIX = os.environ.get('EMAIL_SUBJECT_PREFIX', '[RH] ')

# Option utile en dev local: envoyer en console au lieu de SMTP
# (décommentez si besoin rapidement)
# if DEBUG:
#     EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'